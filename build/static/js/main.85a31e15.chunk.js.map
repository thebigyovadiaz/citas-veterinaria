{"version":3,"sources":["componentes/Header.js","componentes/AgregarCita.js","componentes/Cita.js","componentes/ListaCitas.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","_ref","titulo","react_default","a","createElement","className","stateInicial","cita","mascota","duenio","fecha","hora","sintomas","error","AgregarCita","state","handleChange","e","_this","setState","Object","objectSpread","defineProperty","target","name","value","handleSubmit","preventDefault","_this$state$cita","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","_this$props$cita","propietario","onClick","eliminarCita","ListaCitas","citas","mensaje","keys","length","map","key","componentes_Cita","App","datos","concat","toConsumableArray","idCita","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","componentes_Header","componentes_AgregarCita","componentes_ListaCitas","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85a31e15.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({titulo}) => {\n  return (\n    <header>\n      <h1 className=\"text-center\">{titulo}</h1>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  titulo: PropTypes.string.isRequired\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst stateInicial = {\n  cita: {\n    mascota: '',\n    duenio: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  },\n  error: false\n}\n\nclass AgregarCita extends Component {\n  state = { ...stateInicial }\n\n  // Cuando el usuario escribe en los inputs\n  handleChange = (e) => {\n    this.setState({\n      cita: {\n        ...this.state.cita,\n        [e.target.name]: e.target.value\n      }\n    });\n  }\n\n  // Cuando se envia el formulario\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Extraer los valores del state\n    const { mascota, duenio, fecha, hora, sintomas } = this.state.cita;\n\n    // Validar que los campos estén llenos\n    if (mascota === '' || duenio === '' || fecha === '' || hora === '' || sintomas === '') {\n      this.setState({\n        error: true\n      });\n\n      return;\n    }\n\n    // Generar objetos con los datos\n    const nuevaCita = {...this.state.cita};\n    nuevaCita.id = uuid();\n\n    // Agregar la cita al state de App\n    this.props.crearNuevaCita(nuevaCita);\n\n    // Colocar el state al stateInicial\n    this.setState({\n      ...stateInicial\n    })\n\n  }\n\n  render() {\n\n    const { error } = this.state;\n\n    return (\n      <div className=\"card mt-5\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title text-center mb-5\">\n            Llena el Formulario para Agregar Citas\n          </h2>\n\n          { error ? <div className=\"alert alert-danger text-center mt-2 mb-5\">Todos los campos son obligatorios</div> : null}\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Mascota\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input\n                  type=\"text\"\n                  // ref={this.nombreMascotaRef}\n                  className=\"form-control\"\n                  placeholder=\"Nombre Mascota\"\n                  name=\"mascota\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.mascota}\n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Dueño\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input\n                  type=\"text\"\n                  // ref={this.nombreDuenioRef}\n                  className=\"form-control\"\n                  placeholder=\"Nombre Dueño de la Mascota\"\n                  name=\"duenio\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.duenio}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Fecha\n              </label>\n              <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\n                <input\n                  type=\"date\"\n                  // ref={this.fechaRef}\n                  className=\"form-control\"\n                  name=\"fecha\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.fecha}\n                />\n              </div>\n\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Hora\n              </label>\n              <div className=\"col-sm-8 col-lg-4\">\n                <input\n                  type=\"time\"\n                  // ref={this.horaRef}\n                  className=\"form-control\"\n                  name=\"hora\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.hora}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Sintomas\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <textarea\n                  // ref={this.sintomasRef}\n                  className=\"form-control\"\n                  name=\"sintomas\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.sintomas}\n                >\n                </textarea>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <div className=\"\">\n                <input\n                  type=\"submit\"\n                  className=\"py-3 mt-2 btn btn-success btn-block\"\n                  value=\"Agregar Nueva Cita\"\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nAgregarCita.propTypes = {\n  crearNuevaCita: PropTypes.func.isRequired\n}\n\nexport default AgregarCita;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cita extends Component {\n\n  render() {\n\n    const {mascota, propietario, fecha, hora, sintomas, id} = this.props.cita;\n\n    return (\n      <div className=\"media mt-3\">\n        <div className=\"media-body\">\n          <h3 className=\"mt-0\">{mascota}</h3>\n          <p className=\"card-text\"><span>Nombre del Dueño: </span>{propietario}</p>\n          <p className=\"card-text\"><span>Fecha: </span> {fecha}</p>\n          <p className=\"card-text\"><span>Hora: </span> {hora}</p>\n          <p className=\"card-text\"><span>Sintomas: </span></p>\n          <p className=\"card-text\">{sintomas}</p>\n\n          <button onClick={() => this.props.eliminarCita(id)} className=\"btn btn-danger\">Eliminar</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nCita.propTypes = {\n  cita: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    mascota: PropTypes.string.isRequired,\n    propietario: PropTypes.string.isRequired,\n    fecha: PropTypes.string.isRequired,\n    hora: PropTypes.string.isRequired,\n    sintomas: PropTypes.string.isRequired\n  }),\n  eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;\n","import React, { Component } from 'react';\nimport Cita from './Cita';\nimport PropTypes from 'prop-types';\n\nclass ListaCitas extends Component {\n  render() {\n\n    const citas = this.props.citas;\n\n    const mensaje = Object.keys(citas).length === 0 ? 'No hay Citas' : 'Administra tus citas aquí';\n\n    return (\n      <div className=\"card mt-2 py-5\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title text-center\">{mensaje}</h2>\n\n          <div className=\"lista-citas\">\n            {Object.keys(citas).map(key => (\n              <Cita\n                cita={this.props.citas[key]}\n                key={key}\n                eliminarCita={this.props.eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nListaCitas.propTypes = {\n  citas: PropTypes.array.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\n\nexport default ListaCitas;\n","import React, { Component } from 'react';\nimport '../css/bootstrap.min.css';\nimport Header from './Header';\nimport AgregarCita from './AgregarCita';\nimport ListaCitas from './ListaCitas';\n\nclass App extends Component {\n  state = {\n    citas: []\n  }\n\n  // Cuando carga la aplicación\n  componentDidMount() {\n    const citasLS = localStorage.getItem('citas');\n\n    if (citasLS) {\n      this.setState({\n        citas: JSON.parse(citasLS)\n      });\n    }\n  }\n\n  // Cuando eliminamos ó agregamos una nueva cita\n  componentDidUpdate() {\n    localStorage.setItem(\n      'citas',\n      JSON.stringify(this.state.citas)\n    )\n  }\n\n  crearNuevaCita = (datos) => {\n    const citas = [...this.state.citas, datos];\n\n    this.setState({\n      citas\n    });\n  }\n\n  eliminarCita = (idCita) => {\n    // Copia del state\n    const citasActuales = [...this.state.citas]\n\n    // Eliminar cita utilizando filter\n    const citas = citasActuales.filter(cita => cita.id !== idCita);\n\n    // Actualizar state\n    this.setState({\n      citas\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          titulo=\"Administrador Pacientes Veterinaria\"\n        />\n\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <AgregarCita\n              crearNuevaCita={this.crearNuevaCita}\n            />\n          </div>\n          <div className=\"mt-5 col-md-10 mx-auto\">\n            <ListaCitas\n              citas={this.state.citas}\n              eliminarCita={this.eliminarCita}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}